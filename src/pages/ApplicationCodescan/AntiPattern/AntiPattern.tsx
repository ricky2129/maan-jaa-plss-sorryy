import { CodeBlock } from "react-code-blocks";

import { CheckOutlined } from "@ant-design/icons";
import { Flex, Space, Splitter, Tag, message } from "antd";
import { FetchCodeScanResponse } from "interfaces";

import { CopyIcon } from "assets";

import { Button, IconViewer, Text } from "components";

import { Colors, Metrics } from "themes";

import "./antiPattern.style.scss";

interface AntiPatternProps {
  selectedAntiPattern: FetchCodeScanResponse;
  handleUpdateAction: (isActionTaken: boolean, doc_id: string) => void;
  loadingUpdateAction?: boolean;
}

const AntiPattern: React.FC<AntiPatternProps> = ({
  selectedAntiPattern,
  handleUpdateAction,
  loadingUpdateAction = false,
}) => {
  const [messageApi, contextHolder] = message.useMessage();
  return (
    <Flex vertical gap={Metrics.SPACE_LG}>
      {contextHolder}
      <Flex vertical gap={Metrics.SPACE_SM}>
        <Flex vertical gap={Metrics.SPACE_XS}>
          <Text
            type="footnote"
            text="Description"
            weight="semibold"
            color={Colors.COOL_GRAY_9}
          />
          <Text
            type="bodycopy"
            text="If this remediated anti-pattern implementation will improve below issues:"
            color={Colors.COOL_GRAY_11_DARK}
          />
          <Flex align="center" wrap gap={Metrics.SPACE_SM}>
            {selectedAntiPattern?.antipatterns?.map((tag, index) => (
              <Tag key={index} className="antipattern-tag semibold" title={tag}>
                {tag}
              </Tag>
            ))}
          </Flex>
        </Flex>
        {selectedAntiPattern?.isActionTaken ? (
          <Button
            type="text"
            title="Applied"
            customClass="published-btn-container semibold"
            icon={
              <IconViewer
                Icon={CheckOutlined}
                size={15}
                color={Colors.PRIMARY_GREEN_600}
              />
            }
            onClick={() =>
              handleUpdateAction(false, selectedAntiPattern.doc_id)
            }
            style={{ width: "fit-content" }}
            disabled={loadingUpdateAction}
            loading={loadingUpdateAction}
          />
        ) : (
          <Button
            title="Mark it as Applied"
            size="middle"
            onClick={() => handleUpdateAction(true, selectedAntiPattern.doc_id)}
            style={{ width: "fit-content" }}
            disabled={loadingUpdateAction}
            loading={loadingUpdateAction}
          />
        )}
      </Flex>
      <Flex align="center" justify="end">
        <Text
          text={
            <>
              {" "}
              Recipes and code snippets generated by:{" "}
              <span style={{ color: Colors.GOLDEN_PURPLE_6 }}>
                {" "}
                {`${selectedAntiPattern?.model}`}
              </span>{" "}
            </>
          }
          type="footnote"
          weight="semibold"
          color={Colors.COOL_GRAY_12}
        />
      </Flex>
      <Splitter>
        <Splitter.Panel className="codeblock">
          <Flex className="codeblock-header">
            <Text
              type="footnote"
              weight="semibold"
              text="Current Implementation"
            />
          </Flex>
          <Space className="codeblock">
            <CodeBlock
              text={selectedAntiPattern?.currentImplementation}
              language="python"
              showLineNumbers
            />
          </Space>
        </Splitter.Panel>
        <Splitter.Panel className="codeblock">
          <Flex
            className="remediated-codeblock codeblock-header "
            justify="space-between"
          >
            <Flex align="center" gap={Metrics.SPACE_MD}>
              <Text
                type="footnote"
                weight="semibold"
                text="Remediated Implementation"
              />
            </Flex>

            <Button
              type="default"
              size="small"
              icon={<IconViewer Icon={CopyIcon} />}
              onClick={async () => {
                await navigator.clipboard.writeText(
                  selectedAntiPattern?.remediatedImplementation,
                );

                messageApi.success({
                  content: "Copied to clipboard",
                });
              }}
            />
          </Flex>
          <Space className="remediated-codeblock">
            <CodeBlock
              text={selectedAntiPattern?.remediatedImplementation}
              language="python"
              showLineNumbers
            />
          </Space>
        </Splitter.Panel>
      </Splitter>
    </Flex>
  );
};

export default AntiPattern;
